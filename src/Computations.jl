##
#
# Let's find those roots!
#


"""

    find_roots!(poly_iter, image)

Find all roots of polynomials generated by polynomial generator `poly_iter` and
draw these roots directly onto `image` (see `add_root!`).
Ignores zero as a root, it occurs too many times and is not that interesting.

This function relies on `roots` from the `PolynomialRoots` package.
"""
function find_roots!(poly_iter::PolynomialIterator{S}, image::RootsImage{T}) where {S <: Number, T <: Real} 
  progress = Progress(length(poly_iter), 10)

  for poly in poly_iter
    for z in roots(poly)
      if !isnan(z) && abs(z) > eps(T) # PolynomialRoots pad roots array with NaNs,
        add_root!(image, z)           # ignore zero as a root.
      end
    end
    next!(progress)
  end

  @info "$(Int(sum(image.data))) roots found."
end


"""

    find_roots!(poly_iter, filename)

Find all roots of polynomials generated by polynomial generator `poly_iter` and
save these roots into `filename` in binary form. Ignore zero as a root,
it occurs too many times and is not interesting.

This function relies on `roots` from the `PolynomialRoots` package.
"""
function find_roots!(poly_iter::PolynomialIterator{S}, filename::AbstractString) where {S <: Number}
  counter = 0
  progress = Progress(length(poly_iter), 10)

  open(filename, "w") do io
    for poly in poly_iter
      for z in roots(poly)
        if !isnan(z) && abs(z) > eps(S) # PolynomialRoots pad roots array with NaNs,
          write(io, z)                  # ignore zero as a root.
          counter += 1
        end
      end
      next!(progress)
    end
  end

  @info "$counter roots found."
end


"""
TODO
"""
function compute_roots_in_parallel!(poly_iter::PolynomialIterator{S}, filename::AbstractString, batch_size) where {S <: Number}
  error("Not implemented yet.")
end
